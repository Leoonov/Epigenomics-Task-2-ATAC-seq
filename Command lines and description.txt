############ Epigenomics (Final exercise), UVic, Feb. 2024 ##################


##TASK 4## EN‐TEx ATAC‐seq data: downstream analyses

# run docker and go to the folder ATAC-seq

sudo docker run -v $PWD:$PWD -w $PWD --rm -it dgarrimar/epigenomics_course

cd ATAC-Seq

#create necessary folders:

mkdir data #to store bigBed files

mkdir data/bigBed.files

mkdir analyses

mkdir analyses/peaks.analysis

mkdir annotation


#to download the metadata file

../bin/download.metadata.sh "https://www.encodeproject.org/metadata/?replicates.library.biosample.donor.uuid=d370683e-81e7-473f-8475-7716d027849b&status=released&status=submitted&status=in+progress&assay_slims=DNA+accessibility&assay_title=ATAC-seq&biosample_ontology.term_name=stomach&biosample_ontology.term_name=sigmoid+colon&type=Experiment"


#to extract needed information from metadata file for ATAC-seq (bigBed narrow, pseudoreplicated_peaks, assembly GRCh38), the pipeline must be run inside ATAC-seq:

grep -F "bigBed_narrowPeak" metadata.tsv | grep -F "pseudoreplicated_peaks" | grep -F "GRCh38" |awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' | sort -k2,2 -k1,1r | sort -k2,2 -u > analyses/bigBed.peaks.ids.txt

cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

#to ensure that md5sum values coincide with the ones provided by ENCODE:

# compute MD5 hash on the downloaded files

for file_type in bigBed; do
../bin/selectRows.sh <(cut -f1 analyses/"$file_type".*.ids.txt) metadata.tsv | cut -f1,46 > data/"$file_type".files/md5sum.txt
cat data/"$file_type".files/md5sum.txt |\
while read filename original_md5sum; do 
md5sum data/"$file_type".files/"$filename"."$file_type" |\
awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" "; OFS="\t"}{print filename, original_md5sum, $1}' 
done > tmp 
mv tmp data/"$file_type".files/md5sum.txt
awk '$2!=$3' data/"$file_type".files/md5sum.txt
done

#Intersection analysis for stomach and sigmoid_colon using BEDTools, we need to calculate (1) the number of peaks that intersect promoter regions and (2) the number of peaks that fall outside gene coordinates (whole gene body, not just the promoter regions).

##to convert bigBed files of ATAC-seq peaks to Bed files with the bigBedToBed command, all command lines must be run in the new folder (peaks.analysis inside analyses):
 
mkdir -p data/bed.files  # Ensure the directory exists

### Loop through the filenames and convert bigBed files to Bed format
cut -f1 analyses/bigBed.peaks.ids.txt |
while read filename; do
    bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done

##to download the annotation file:

wget -P annotation "https://www.encodeproject.org/files/gencode.v24.primary_assembly.annotation/@@download/gencode.v24.primary_assembly.annotation.gtf.gz"

gunzip annotation/gencode.v24.primary_assembly.annotation.gtf.gz

less annotation/gencode.v24.primary_assembly.annotation.gtf

## to download promoters from TSS and protein-coding genes (inside annotation folder):

wget -P annotation https://public-docs.crg.es/rguigo/Data/bborsari/UVIC/epigenomics_course/gencode.v24.protein.coding.non.redundant.TSS.bed

cut -f-2 analyses/bigBed.peaks.ids.txt |\
while read filename tissue; do
bedtools intersect -a data/bed.files/"$filename".bed -b annotation/gencode.v24.protein.coding.non.redundant.TSS.bed -u> analyses/peaks.analysis/peaks.inter.promoters."$tissue".bed
done

 #Output:
 # 47871 analyses/peaks.analysis/peaks.inter.promoters.sigmoid_colon.bed
 # 44749 analyses/peaks.analysis/peaks.inter.promoters.stomach.bed
 # 92620 total


##to compute the number of peaks that fall outside gene coordinates (whole body, not just promoter regions)

#to create a bed file with the gene body coordinates:

awk '$3=="gene"' annotation/gencode.v24.primary_assembly.annotation.gtf | grep -F "protein_coding" | cut -d ";" -f1 | awk 'BEGIN{OFS="\t"}{print $1, $4, $5, $10, 0, $7, $10}' | sed 's/\"//g' | awk 'BEGIN{FS=OFS="\t"}$1!="chrM"{$2=($2-1); print $0}' >annotation/gencode.v24.protein.coding.gene.body.bed

#intersection analyses between the bed files with ATAC-seq peaks and the list of gene coordinates

cut -f-2 analyses/bigBed.peaks.ids.txt |
while read filename tissue; do
bedtools intersect -a data/bed.files/"$filename".bed -b annotation/gencode.v24.protein.coding.gene.body.bed  -v > analyses/peaks.analysis/peaks.outside.body."$tissue".bed
done

wc analyses/peaks.analysis/peaks.not.body*.bed -l

 #Output:
 # 37035 analyses/peaks.analysis/peaks.outside.body.sigmoid_colon.bed
 # 34537 analyses/peaks.analysis/peaks.outside.body.stomach.bed
 # 71572 total


##TASK 5## Distal regulatory activity
#Task 5.1 Data preparation for analysis

#create all necessary folders:

mkdir regulatory_elements
mkdir analyses
mkdir data
mkdir data/bigBed.files
mkdir data/bed.files

#to download metadata file:

../bin/download.metadata.sh "https://www.encodeproject.org/metadata/?replicates.library.biosample.donor.uuid=d370683e-81e7-473f-8475-7716d027849b&status=released&status=submitted&status=in+progress&biosample_ontology.term_name=stomach&biosample_ontology.term_name=sigmoid+colon&assay_slims=DNA+binding&target.label=H3K4me1&target.label=H3K27ac&type=Experiment"

#to extract needed information for H3K27ac:

grep -F H3K27ac metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -u > analyses/bigBed.H3K27ac.peaks.ids.txt

cut -f1 analyses/bigBed.H3K27ac.peaks.ids.txt |\
while read filename; do
  wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

#to extract needed information for H3K4me1:

grep -F H3K4me1 metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -u > analyses/bigBed.H3K4me1.peaks.ids.txt

cut -f1 analyses/bigBed.H3K4me1.peaks.ids.txt |\
while read filename; do
  wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

#to convert into bed format and check files:

### H3K27ac

cut -f1 analyses/bigBed.H3K27ac.peaks.ids.txt |\
while read filename; do
  bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done

for file_type in bigBed; do
../bin/selectRows.sh <(cut -f1 analyses/"$file_type".H3K27ac.peaks.ids.txt) metadata.tsv | cut -f1,46 > data/"$file_type".files/md5sum.txt

cat data/"$file_type".files/md5sum.txt |\
while read filename original_md5sum; do 
md5sum data/"$file_type".files/"$filename"."$file_type" |\
awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" "; OFS="\t"}{print filename, original_md5sum, $1}' 
done > tmp 
mv tmp data/"$file_type".files/md5sum.txt
awk '$2!=$3' data/"$file_type".files/md5sum.txt

done


cat data/bigBed.files/md5sum.txt 

 #Output:
 #ENCFF977LBD     be29636550527e36c4755ea036531e75        be29636550527e36c4755ea036531e75
 #ENCFF872UHN     2207b7b3378df7776e7ecdc2aa1a5de0        2207b7b3378df7776e7ecdc2aa1a5de0
 #Overall, this output suggests that the integrity of the files listed in md5sum.txt has been verified, as the MD5 checksums remain consistent with the original checksums.


## H3K4me1
cut -f1 analyses/bigBed.H3K4me1.peaks.ids.txt |\
while read filename; do
  bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done

for file_type in bigBed; do
../bin/selectRows.sh <(cut -f1 analyses/"$file_type".H3K4me1.peaks.ids.txt) metadata.tsv | cut -f1,46 > data/"$file_type".files/md5sum.txt

cat data/"$file_type".files/md5sum.txt |\
while read filename original_md5sum; do 
md5sum data/"$file_type".files/"$filename"."$file_type" |\
awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" "; OFS="\t"}{print filename, original_md5sum, $1}' 
done > tmp 
mv tmp data/"$file_type".files/md5sum.txt
awk '$2!=$3' data/"$file_type".files/md5sum.txt

done


cat data/bigBed.files/md5sum.txt

 #Output:
 #ENCFF844XRN     de679228721fb4055aa1f657c77c21a6        de679228721fb4055aa1f657c77c21a6
 #ENCFF724ZOF     c87fefbf41de3d291fa1d340a26627f5        c87fefbf41de3d291fa1d340a26627f5
 #Overall, this output suggests that the integrity of the files listed in md5sum.txt has been verified, as the MD5 checksums remain consistent with the original checksums.

#Task 5.2: Distal regulatory regions are usually found to be flanked by both H3K27ac and H3K4me1. From your starting catalogue of open regions in each tissue, select those that overlap peaks of H3K27ac AND H3K4me1 in the corresponding tissue. You will get a list of candidate distal regulatory elements for each tissue. How many are they?

# Intersect ATAC-seq peaks

##H3K27ac:

bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/peaks.outside.body.sigmoid_colon.bed -b data/bed.files/ENCFF872UHN.bed -u > data/bed.files/H3K27ac.intersect_sigmoid_colon.bed

bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/peaks.outside.body.stomach.bed -b data/bed.files/ENCFF977LBD.bed -u > data/bed.files/H3K27ac.intersect_stomach.bed

##H3K4me1:

bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/peaks.outside.body.sigmoid_colon.bed -b data/bed.files/ENCFF724ZOF.bed -u > data/bed.files/H3K4me1.intersect_sigmoid.bed

bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/peaks.outside.body.stomach.bed -b data/bed.files/ENCFF844XRN.bed -u > data/bed.files/H3K4me1.intersect_stomach.bed

#to obtain final results:

bedtools intersect -a data/bed.files/H3K4me1.intersect_stomach.bed -b data/bed.files/H3K27ac.intersect_stomach.bed -u > data/total_stomach.bed

bedtools intersect -a data/bed.files/H3K4me1.intersect_sigmoid.bed -b data/bed.files/H3K27ac.intersect_sigmoid_colon.bed -u > data/total_sigmoid.bed

 #Output:
 #14215 total_sigmoid.bed
 #8022 total_stomach.bed
 #22237 total

#Task 5.3: Focus on regulatory elements that are located on chromosome 1 (hint: to parse a file based on the value of a specific column, have a look at what we did here), and generate a file regulatory.elements.starts.tsv that contains the name of the regulatory region (i.e. the name of the original ATAC-seq peak) and the start (5') coordinate of the region

for tissue in sigmoid stomach; do
awk 'BEGIN{FS=OFS="\t"}$1=="chr1"{print $4, $2}' total_"$tissue".bed > regulatory.elements.starts."$tissue".tsv
done

wc -l *.tsv #run it moving to the data folder

 #Output:
 #1521 regulatory.elements.starts.sigmoid.tsv
 #987 regulatory.elements.starts.stomach.tsv
 #2508 total

#to check files:

head regulatory.elements.starts.sigmoid.tsv

 #Output (just for sigmoid_colon):
 #Peak_23845      817296
 #Peak_54490      817296
 #Peak_67130      817296
 #Peak_22173      904265
 #Peak_39088      904265
 #Peak_21162      923679
 #Peak_20098      1122088
 #Peak_233916     1157380
 #Peak_24251      1157380
 #Peak_62286      1157380

#Task 5.4: Focus on protein-coding genes located on chromosome 1. From the BED file of gene body coordinates that you generated here, prepare a tab-separated file called gene.starts.tsv which will store the name of the gene in the first column, and the start coordinate of the gene on the second column (REMEMBER: for genes located on the minus strand, the start coordinate will be at the 3').

# move back to regulatory_elements folder and run:

grep -w chr1 ../ATAC-seq/annotation/gencode.v24.protein.coding.gene.body.bed| awk 'BEGIN{FS=OFS="\t"}{if ($6=="+"){start=$2} else {start=$3}; print $4, start}' > gene.starts.tsv

head gene.starts.tsv

#Task 5.5: Download or copy this Python script inside the epigenomics_uvic/bin folder. 

#to create py file inside regulatory_elements/bin folder:

mkdir bin

nano get.distance.py

#provided in hands-on Python script was changed a bit in a line: print("{gene}\t{start}\t{min_distance}".format(gene=gene, start=start, min_distance=min_distance))

#to test our script:

python bin/get.distance.py --input gene.starts.tsv --start 980000

 #Output:
 #ENSG00000187642.9       982093  2093

#Task 5.6: For each regulatory element contained in the file regulatory.elements.starts.tsv, retrieve the closest gene and the distance to the closest gene using the python script you created above. Use the command below as a starting point:

#for stomach:

cat data/regulatory.elements.starts.stomach.tsv | while read element start; do
    python /home/vadim/epigenomics_uvic/regulatory_elements/bin/get.distance.py --input /home/vadim/epigenomics_uvic/regulatory_elements/gene.starts.tsv --start $start
done > regulatory.elements.genes.distances.stomach.tsv


# for sigmoid colon:

cat data/regulatory.elements.starts.sigmoid.tsv | while read element start; do
    python /home/vadim/epigenomics_uvic/regulatory_elements/bin/get.distance.py --input /home/vadim/epigenomics_uvic/regulatory_elements/gene.starts.tsv --start $start
done > regulatory.elements.genes.distances.sigmoid.tsv


#Task 5.7: Use R to compute the mean and the median of the distances stored in regulatoryElements.genes.distances.tsv.

setwd("C:/Users/M0sa2/Desktop/Epigenomics")

#for stomach:

data_stomach <- read.table("regulatory.elements.genes.distances.stomach.tsv", header = TRUE, sep = "\t")
colnames(data_stomach) <- c("Gene", "Start", "Distance")
mean_distance <- mean(data_stomach$Distance)
median_distance <- median(data_stomach$Distance)
print(mean_distance)
print(median_distance)
result <- data.frame(Mean = mean_distance, Median = median_distance)
write.table(result, file = "C:/Users/M0sa2/Desktop/Epigenomics/results_distance_stomach.txt", sep = "\t", row.names = FALSE)

 #Output:
 #"Mean"	"Median"
 #45266.1987829615	27735


# for sigmoid colon:

data_sigmoid <- read.table("regulatory.elements.genes.distances.sigmoid.tsv", header = TRUE, sep = "\t")
colnames(data_sigmoid) <- c("Gene", "Start", "Distance")
mean_distance <- mean(data_sigmoid$Distance)
median_distance <- median(data_sigmoid$Distance)
print(mean_distance)
print(median_distance)
result <- data.frame(Mean = mean_distance, Median = median_distance)
write.table(result, file = "C:/Users/M0sa2/Desktop/Epigenomics/results_distance_sigmoid.txt", sep = "\t", row.names = FALSE)

 #Output:
 #"Mean"	"Median"
 #73783.9671052632	35768
